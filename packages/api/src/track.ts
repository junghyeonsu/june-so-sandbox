/**
 * @see https://www.june.so/docs/tracking/http-api/track
 */
export interface TrackProps {
  writeKey: string;

  /**
   * @description The name of the event you’re tracking. You can read more about the track method and recommended event names.
   */
  event: string;

  /**
   * @description A JavaScript date object representing when the track took place. If the track just happened, leave it out and the server’s time will be used. If you’re importing data from the past, make sure to send a timestamp.
   */
  timestamp?: Date;

  /**
   * @description The ID for this user in your database. Note: At least one of userId or anonymousId must be included in any track call.
   */
  userId?: string;

  /**
   * @description An ID associated with the user when you don’t know who they are (for example, the anonymousId generated by analytics.js). Note: You must include at least one of userId or anonymousId in all track calls.
   */
  anonymousId?: string;

  /**
   * @description A dictionary of properties for the event. For instance, if the event was Product Added, it might have properties like price or product.
   */
  properties?: Record<string, unknown>;

  /**
   * @description A dictionary of extra context to attach to the call. Note: context differs from traits because it is not attributes of the user itself.
   */
  context?: Record<string, unknown>;
}

export interface TrackResponse {
  status: number;
  success: boolean;
}

export const track = (props: TrackProps) => {
  const { writeKey, ...restProps } = props;

  const headers = {
    Authorization: `Basic ${writeKey}`,
    "Content-Type": "application/json",
  };

  return fetch("https://api.june.so/sdk/track", {
    method: "POST",
    headers,
    body: JSON.stringify(restProps),
  }) as Promise<Response & TrackResponse>;
};
